---
- name: D√©ploiement des conteneurs ApplicationTicket (Production)
  hosts: remote
  become: true

  vars:
    source_dir: /data/LiadtechMernStackApplicationTicket
    project_dir: /data/ApplicationTicket
    compose_path: "{{ project_dir }}/docker-compose.yml"

  tasks:
    - name: V√©rifier quelle commande Docker Compose est disponible
      shell: |
        if docker compose version >/dev/null 2>&1; then
          echo "docker compose"
        elif docker-compose version >/dev/null 2>&1; then
          echo "docker-compose"
        else
          echo "none"
        fi
      register: compose_cmd_result
      changed_when: false

    - name: √âchouer si Docker Compose est indisponible
      fail:
        msg: "‚ùå Aucune commande docker compose ou docker-compose n‚Äôest disponible sur la VM."
      when: compose_cmd_result.stdout == "none"

    - name: D√©finir la commande docker-compose d√©tect√©e
      set_fact:
        compose_cmd: "{{ compose_cmd_result.stdout }}"

    - name: Cr√©er le dossier projet ApplicationTicket
      file:
        path: "{{ project_dir }}"
        state: directory
        owner: mdraoui
        group: mdraoui
        mode: "0755"

    - name: Synchroniser le projet vers la VM (exclure les artefacts inutiles)
      synchronize:
        src: "{{ source_dir }}/"
        dest: "{{ project_dir }}/"
        recursive: yes
        delete: yes
        rsync_opts:
          - "--exclude=node_modules/"
          - "--exclude=.next/"
          - "--exclude=dist/"
          - "--exclude=.turbo/"
          - "--exclude=.DS_Store"
          - "--exclude=Thumbs.db"
      delegate_to: localhost

    - name: V√©rifier l'existence de docker-compose.yml
      stat:
        path: "{{ compose_path }}"
      register: compose_file

    - name: Stopper les anciens conteneurs (si fichier pr√©sent)
      shell: "{{ compose_cmd }} -p appticket down || true"
      args:
        chdir: "{{ project_dir }}"
      when: compose_file.stat.exists

    - name: V√©rifier la syntaxe de la configuration Docker Compose
      shell: "{{ compose_cmd }} config"
      args:
        chdir: "{{ project_dir }}"
      when: compose_file.stat.exists

    - name: D√©marrer les conteneurs Docker ApplicationTicket
      shell: |
        echo "üîç D√©ploiement de {{ compose_path }}"
        export COMPOSE_PROJECT_NAME=appticket
        {{ compose_cmd }} up -d --build --remove-orphans
        sleep 10
        echo "üîé √âtat des conteneurs :"
        docker ps -a
      args:
        chdir: "{{ project_dir }}"
        executable: /bin/bash
      register: docker_up_result
      ignore_errors: true

    - name: Afficher l‚Äô√©tat du d√©ploiement Docker
      debug:
        var: docker_up_result.stdout_lines

    - name: Logs backend (server) en cas d‚Äô√©chec
      shell: "{{ compose_cmd }} logs server | tail -n 100"
      args:
        chdir: "{{ project_dir }}"
      when: docker_up_result.rc != 0
      register: backend_logs
      ignore_errors: true

    - name: Debug logs backend
      debug:
        var: backend_logs.stdout_lines
      when: docker_up_result.rc != 0

    - name: Logs frontend (src) en cas d‚Äô√©chec
      shell: "{{ compose_cmd }} logs src | tail -n 100"
      args:
        chdir: "{{ project_dir }}"
      when: docker_up_result.rc != 0
      register: frontend_logs
      ignore_errors: true

    - name: Debug logs frontend
      debug:
        var: frontend_logs.stdout_lines
      when: docker_up_result.rc != 0
