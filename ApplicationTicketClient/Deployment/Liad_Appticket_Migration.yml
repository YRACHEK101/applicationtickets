name: Application Ticket Client Pipeline VLAN Migration

trigger:
  branches:
    include:
      - master
      - development

pr:
  branches:
    include:
      - master

pool:
  vmImage: "ubuntu-22.04"

variables:
  - group: APPTicket-SECRET1
  - name: NODE_VERSION
    value: "19.x"
  - name: npm_config_cache
    value: $(Pipeline.Workspace)/.npm
  - name: sonarQubeServiceConnection
    value: "SonarQubeAPPTC"

stages:
  # === üß™ Build & Test ===
  - stage: Build
    displayName: "Build & Tests"
    jobs:
      - job: BuildAndTest
        displayName: "Build des apps Frontend & Backend"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "$(NODE_VERSION)"
            displayName: "Installer Node.js"

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)"'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npm_config_cache)
            displayName: "Cache npm"
            continueOnError: true

          - script: |
              cd server && npm install
              cd ../src && npm install
            displayName: "Installer d√©pendances frontend & backend"

          - script: |
              cd server
              echo "Lancer les tests backend..."
              npm run test || true
            displayName: "Tests backend"
            continueOnError: true

          - script: |
              echo "Structure projet apr√®s installation"
              find $(Build.SourcesDirectory) -type f
            displayName: "Afficher contenu projet"
          - script: |
              echo "Supprimer SONARQUBE_SCANNER_PARAMS"
              echo "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS;issecret=true]{}"
            displayName: "Neutraliser param√®tres sonar.branch.name"

          - task: SonarQubePrepare@7
            inputs:
              SonarQube: "$(sonarQubeServiceConnection)"
              scannerMode: "CLI"
              configMode: "manual"
              cliProjectKey: "ApplicationTicketClient"
              cliProjectName: "ApplicationTicketClient"
              cliSources: "."
              extraProperties: |
                sonar.projectKey=ApplicationTicketClient
                sonar.projectName=ApplicationTicketClient
                sonar.sourceEncoding=UTF-8
                sonar.sources=.
                sonar.exclusions=**/node_modules/**,**/dist/**,**/*.png,**/*.jpg,**/*.svg
                sonar.qualitygate.wait=false
            displayName: "Pr√©parer SonarQube"

          - task: SonarQubeAnalyze@7
            displayName: "Analyser SonarQube"

          - task: SonarQubePublish@7
            inputs:
              pollingTimeoutSec: "300"
            displayName: "Publier analyse SonarQube"

  # === üìä Rapport HTML/PDF ===
  - stage: rapport
    displayName: "Rapport HTML SonarQube"
    jobs:
      - job: GenRapport
        steps:
          - script: |
              cd Deployment/scripts
              npm install blob
              npm install
            displayName: "Installer d√©pendances rapport"

          - script: |
              cd Deployment/scripts
              node generate-report.js
            displayName: "G√©n√©rer rapport Sonar"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.SourcesDirectory)/Deployment/output"
              ArtifactName: "sonar-reports"
              publishLocation: "Container"
            displayName: "Publier rapport"

  # === üöÄ D√©ploiement VM OVH VLAN ===
  - stage: Deploy
    displayName: "D√©ploiement avec Ansible sur OVH VM"
    jobs:
      - job: DeployVLAN
        pool:
          name: Default
          demands:
            - Agent.Name -equals LiadtechMernStackDemo

        steps:
          - script: |
              echo "üìÅ V√©rification Ansible Deployment"
              ls -la $(System.DefaultWorkingDirectory)/Deployment/ansible
              echo "Contenu inventaire :"
              cat $(System.DefaultWorkingDirectory)/Deployment/ansible/inventory.ini
            displayName: "üîç Check fichiers Ansible"

          - task: Bash@3
            displayName: "üöÄ Ex√©cuter playbook Ansible"
            inputs:
              targetType: "inline"
              workingDirectory: "$(System.DefaultWorkingDirectory)/Deployment/ansible"
              script: |
                ansible-playbook -i inventory.ini playbook.yml -e "source_dir=$(Build.SourcesDirectory)" -u mdraoui -b -vvv
